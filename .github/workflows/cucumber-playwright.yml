name: UserGroup Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tags para rodar os testes'
        required: false
        default: ''
  schedule:
    - cron: "0 11 * * 1-5"

permissions:
  contents: write
  pages: write

jobs:
  test:
    timeout-minutes: 60  
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js and Playwright
        run: |
          npx playwright install --with-deps
          npm ci

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright Browsers (Chromium)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-
      
      - name: Install Google Chrome for Playwright
        run: npx playwright install chromium --with-deps

      - name: Ensure test-results directory exists
        run: mkdir -p test-results

      - name: Ensure .env file is available
        run: |
          mkdir -p helper/env
          cat <<EOF > helper/env/.env.test
          USER_NAME=${{ secrets.USER_NAME }}
          PASSWORD=${{ secrets.PASSWORD }}
          BASEURL=${{ secrets.BASEURL }}
          ENV=test
          EOF

      - name: Run Cucumber tests
        id: run_tests
        env:
          BASEURL: ${{ secrets.BASEURL }}
          ENV: test
          npm_config_TAGS: "${{ github.event.inputs.tags }}"
        run: |
          TAGS_OPTION=""
          if [[ -n "${{ github.event.inputs.tags }}" ]]; then
            TAGS_OPTION="--TAGS=${{ github.event.inputs.tags }}"
          fi
          
          npm test $TAGS_OPTION --exit | tee output.log
          
          if grep -q "failed" output.log; then
            echo "Testes falharam!"
            exit 1
          fi

      - name: Criar ou reabrir bug no ClickUp para cada cen√°rio com falha
        if: failure()
        run: |
          echo "üîç Buscando cen√°rios com falha no relat√≥rio JSON..."
        
          readarray -t FAILED_SCENARIOS < <(jq -r '.[]?.elements[]? | select(.steps[].result.status=="failed") | .name' test-results/cucumber-report.json | sort -u)
        
          if [ ${#FAILED_SCENARIOS[@]} -eq 0 ]; then
            echo "‚úÖ Nenhum cen√°rio com falha encontrado."
            exit 0
          fi
        
          for SCENARIO in "${FAILED_SCENARIOS[@]}"; do
            echo "üîç Verificando tarefas existentes para: $SCENARIO"
        
            EXISTING_TASKS=$(curl -s -G "https://api.clickup.com/api/v2/list/${{ secrets.CLICKUP_LIST_ID }}/task" \
              --data-urlencode "search=$SCENARIO" \
              -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
              -H "Content-Type: application/json")
        
            MATCHING_TASK_ID=$(echo "$EXISTING_TASKS" | jq -r --arg scenario "$SCENARIO" '.tasks[] | select(.name | test($scenario)) | .id')
            MATCHING_TASK_STATUS=$(echo "$EXISTING_TASKS" | jq -r --arg scenario "$SCENARIO" '.tasks[] | select(.name | test($scenario)) | .status.status')
        
            if [ -n "$MATCHING_TASK_ID" ]; then
              echo "üîé Tarefa encontrada: ID=$MATCHING_TASK_ID com status=$MATCHING_TASK_STATUS"
        
              if [[ "$MATCHING_TASK_STATUS" == "functional review" || "$MATCHING_TASK_STATUS" == "closed" ]]; then
                echo "‚ôªÔ∏è Reabrindo tarefa existente, alterando status para TO DO..."
                curl -s -X PUT "https://api.clickup.com/api/v2/task/$MATCHING_TASK_ID" \
                  -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d '{"status": "to do"}'
              else
                echo "‚ö†Ô∏è Bug j√° existe com status ativo ‚Äì sem altera√ß√µes."
                continue
              fi
            else
              echo "üêû Nenhuma tarefa encontrada ‚Äì criando nova para o cen√°rio: $SCENARIO"
        
              STEPS=$(jq -r --arg scenario "$SCENARIO" '
                .[]?.elements[]? 
                | select(.name == $scenario) 
                | .steps[] 
                | "- " + .keyword + .name + " (" + .result.status + ")" 
                  + (if .result.error_message then "\n  üí• " + (.result.error_message | gsub("\n"; " ") | gsub("\r"; "")) else "" end)' test-results/cucumber-report.json)
        
              DESCRIPTION=$(printf "Falha no cen√°rio automatizado: \"%s\"\n\nüîó Workflow: %s/%s/actions/runs/%s\n\nüìã Passos:\n%s" \
                "$SCENARIO" "${{ github.server_url }}" "${{ github.repository }}" "${{ github.run_id }}" "$STEPS")
        
              curl -s -X POST "https://api.clickup.com/api/v2/list/${{ secrets.CLICKUP_LIST_ID }}/task" \
                -H "Authorization: ${{ secrets.CLICKUP_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$(jq -n \
                  --arg name "üêû CI Fail : $SCENARIO" \
                  --arg description "$DESCRIPTION" \
                  '{
                    name: $name,
                    description: $description,
                    status: "to do",
                    priority: 3
                  }')"
            fi
          done

      - name: Upload Cucumber Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cucumber-test-report
          path: test-results
          retention-days: 5

  deploy-report:
    needs: test
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - name: Download Test Report
        uses: actions/download-artifact@v4
        with:
          name: cucumber-test-report
          path: test-results

      - name: Rename Cucumber Report to index.html (if exists)
        run: |
          if [ -f test-results/cucumber-report.html ]; then
            cp test-results/cucumber-report.html test-results/index.html
          else
            echo "Arquivo cucumber-report.html n√£o encontrado. Pulando renomea√ß√£o."
          fi

      - name: Ensure JSON is accessible
        run: |
          if [ -f test-results/cucumber-report.json ]; then
            cp test-results/cucumber-report.json test-results/report.json
          else
            echo "Arquivo cucumber-report.json n√£o encontrado."
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: test-results
          publish_branch: gh-pages
          force_orphan: true
          keep_files: true
